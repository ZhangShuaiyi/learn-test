/* automatically generated by rust-bindgen 0.68.1 */

pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const XQM_USRQUOTA: u32 = 0;
pub const XQM_GRPQUOTA: u32 = 1;
pub const XQM_PRJQUOTA: u32 = 2;
pub const XQM_MAXQUOTAS: u32 = 3;
pub const FS_DQUOT_VERSION: u32 = 1;
pub const FS_DQ_ISOFT: u32 = 1;
pub const FS_DQ_IHARD: u32 = 2;
pub const FS_DQ_BSOFT: u32 = 4;
pub const FS_DQ_BHARD: u32 = 8;
pub const FS_DQ_RTBSOFT: u32 = 16;
pub const FS_DQ_RTBHARD: u32 = 32;
pub const FS_DQ_LIMIT_MASK: u32 = 63;
pub const FS_DQ_BTIMER: u32 = 64;
pub const FS_DQ_ITIMER: u32 = 128;
pub const FS_DQ_RTBTIMER: u32 = 256;
pub const FS_DQ_TIMER_MASK: u32 = 448;
pub const FS_DQ_BWARNS: u32 = 512;
pub const FS_DQ_IWARNS: u32 = 1024;
pub const FS_DQ_RTBWARNS: u32 = 2048;
pub const FS_DQ_WARNS_MASK: u32 = 3584;
pub const FS_DQ_BCOUNT: u32 = 4096;
pub const FS_DQ_ICOUNT: u32 = 8192;
pub const FS_DQ_RTBCOUNT: u32 = 16384;
pub const FS_DQ_ACCT_MASK: u32 = 28672;
pub const FS_DQ_BIGTIME: u32 = 32768;
pub const FS_QUOTA_UDQ_ACCT: u32 = 1;
pub const FS_QUOTA_UDQ_ENFD: u32 = 2;
pub const FS_QUOTA_GDQ_ACCT: u32 = 4;
pub const FS_QUOTA_GDQ_ENFD: u32 = 8;
pub const FS_QUOTA_PDQ_ACCT: u32 = 16;
pub const FS_QUOTA_PDQ_ENFD: u32 = 32;
pub const FS_USER_QUOTA: u32 = 1;
pub const FS_PROJ_QUOTA: u32 = 2;
pub const FS_GROUP_QUOTA: u32 = 4;
pub const FS_QSTAT_VERSION: u32 = 1;
pub const FS_QSTATV_VERSION1: u32 = 1;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct fs_disk_quota {
    pub d_version: __s8,
    pub d_flags: __s8,
    pub d_fieldmask: __u16,
    pub d_id: __u32,
    pub d_blk_hardlimit: __u64,
    pub d_blk_softlimit: __u64,
    pub d_ino_hardlimit: __u64,
    pub d_ino_softlimit: __u64,
    pub d_bcount: __u64,
    pub d_icount: __u64,
    pub d_itimer: __s32,
    pub d_btimer: __s32,
    pub d_iwarns: __u16,
    pub d_bwarns: __u16,
    pub d_itimer_hi: __s8,
    pub d_btimer_hi: __s8,
    pub d_rtbtimer_hi: __s8,
    pub d_padding2: __s8,
    pub d_rtb_hardlimit: __u64,
    pub d_rtb_softlimit: __u64,
    pub d_rtbcount: __u64,
    pub d_rtbtimer: __s32,
    pub d_rtbwarns: __u16,
    pub d_padding3: __s16,
    pub d_padding4: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_fs_disk_quota() {
    const UNINIT: ::std::mem::MaybeUninit<fs_disk_quota> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fs_disk_quota>(),
        112usize,
        concat!("Size of: ", stringify!(fs_disk_quota))
    );
    assert_eq!(
        ::std::mem::align_of::<fs_disk_quota>(),
        8usize,
        concat!("Alignment of ", stringify!(fs_disk_quota))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_flags) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_fieldmask) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_fieldmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_blk_hardlimit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_blk_hardlimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_blk_softlimit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_blk_softlimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ino_hardlimit) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_ino_hardlimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ino_softlimit) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_ino_softlimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_bcount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_bcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_icount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_icount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_itimer) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_itimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_btimer) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_btimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_iwarns) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_iwarns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_bwarns) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_bwarns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_itimer_hi) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_itimer_hi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_btimer_hi) as usize - ptr as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_btimer_hi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_rtbtimer_hi) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_rtbtimer_hi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_padding2) as usize - ptr as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_padding2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_rtb_hardlimit) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_rtb_hardlimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_rtb_softlimit) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_rtb_softlimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_rtbcount) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_rtbcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_rtbtimer) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_rtbtimer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_rtbwarns) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_rtbwarns)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_padding3) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_padding3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_padding4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_disk_quota),
            "::",
            stringify!(d_padding4)
        )
    );
}
pub type fs_disk_quota_t = fs_disk_quota;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct fs_qfilestat {
    pub qfs_ino: __u64,
    pub qfs_nblks: __u64,
    pub qfs_nextents: __u32,
}
#[test]
fn bindgen_test_layout_fs_qfilestat() {
    const UNINIT: ::std::mem::MaybeUninit<fs_qfilestat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fs_qfilestat>(),
        24usize,
        concat!("Size of: ", stringify!(fs_qfilestat))
    );
    assert_eq!(
        ::std::mem::align_of::<fs_qfilestat>(),
        8usize,
        concat!("Alignment of ", stringify!(fs_qfilestat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qfs_ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_qfilestat),
            "::",
            stringify!(qfs_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qfs_nblks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_qfilestat),
            "::",
            stringify!(qfs_nblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qfs_nextents) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_qfilestat),
            "::",
            stringify!(qfs_nextents)
        )
    );
}
pub type fs_qfilestat_t = fs_qfilestat;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct fs_quota_stat {
    pub qs_version: __s8,
    pub qs_flags: __u16,
    pub qs_pad: __s8,
    pub qs_uquota: fs_qfilestat_t,
    pub qs_gquota: fs_qfilestat_t,
    pub qs_incoredqs: __u32,
    pub qs_btimelimit: __s32,
    pub qs_itimelimit: __s32,
    pub qs_rtbtimelimit: __s32,
    pub qs_bwarnlimit: __u16,
    pub qs_iwarnlimit: __u16,
}
#[test]
fn bindgen_test_layout_fs_quota_stat() {
    const UNINIT: ::std::mem::MaybeUninit<fs_quota_stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fs_quota_stat>(),
        80usize,
        concat!("Size of: ", stringify!(fs_quota_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<fs_quota_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(fs_quota_stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_stat),
            "::",
            stringify!(qs_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_stat),
            "::",
            stringify!(qs_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_pad) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_stat),
            "::",
            stringify!(qs_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_uquota) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_stat),
            "::",
            stringify!(qs_uquota)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_gquota) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_stat),
            "::",
            stringify!(qs_gquota)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_incoredqs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_stat),
            "::",
            stringify!(qs_incoredqs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_btimelimit) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_stat),
            "::",
            stringify!(qs_btimelimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_itimelimit) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_stat),
            "::",
            stringify!(qs_itimelimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_rtbtimelimit) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_stat),
            "::",
            stringify!(qs_rtbtimelimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_bwarnlimit) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_stat),
            "::",
            stringify!(qs_bwarnlimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_iwarnlimit) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_stat),
            "::",
            stringify!(qs_iwarnlimit)
        )
    );
}
pub type fs_quota_stat_t = fs_quota_stat;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct fs_qfilestatv {
    pub qfs_ino: __u64,
    pub qfs_nblks: __u64,
    pub qfs_nextents: __u32,
    pub qfs_pad: __u32,
}
#[test]
fn bindgen_test_layout_fs_qfilestatv() {
    const UNINIT: ::std::mem::MaybeUninit<fs_qfilestatv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fs_qfilestatv>(),
        24usize,
        concat!("Size of: ", stringify!(fs_qfilestatv))
    );
    assert_eq!(
        ::std::mem::align_of::<fs_qfilestatv>(),
        8usize,
        concat!("Alignment of ", stringify!(fs_qfilestatv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qfs_ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_qfilestatv),
            "::",
            stringify!(qfs_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qfs_nblks) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_qfilestatv),
            "::",
            stringify!(qfs_nblks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qfs_nextents) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_qfilestatv),
            "::",
            stringify!(qfs_nextents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qfs_pad) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_qfilestatv),
            "::",
            stringify!(qfs_pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct fs_quota_statv {
    pub qs_version: __s8,
    pub qs_pad1: __u8,
    pub qs_flags: __u16,
    pub qs_incoredqs: __u32,
    pub qs_uquota: fs_qfilestatv,
    pub qs_gquota: fs_qfilestatv,
    pub qs_pquota: fs_qfilestatv,
    pub qs_btimelimit: __s32,
    pub qs_itimelimit: __s32,
    pub qs_rtbtimelimit: __s32,
    pub qs_bwarnlimit: __u16,
    pub qs_iwarnlimit: __u16,
    pub qs_rtbwarnlimit: __u16,
    pub qs_pad3: __u16,
    pub qs_pad4: __u32,
    pub qs_pad2: [__u64; 7usize],
}
#[test]
fn bindgen_test_layout_fs_quota_statv() {
    const UNINIT: ::std::mem::MaybeUninit<fs_quota_statv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fs_quota_statv>(),
        160usize,
        concat!("Size of: ", stringify!(fs_quota_statv))
    );
    assert_eq!(
        ::std::mem::align_of::<fs_quota_statv>(),
        8usize,
        concat!("Alignment of ", stringify!(fs_quota_statv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_pad1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_flags) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_incoredqs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_incoredqs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_uquota) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_uquota)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_gquota) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_gquota)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_pquota) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_pquota)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_btimelimit) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_btimelimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_itimelimit) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_itimelimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_rtbtimelimit) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_rtbtimelimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_bwarnlimit) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_bwarnlimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_iwarnlimit) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_iwarnlimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_rtbwarnlimit) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_rtbwarnlimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_pad3) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_pad4) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qs_pad2) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fs_quota_statv),
            "::",
            stringify!(qs_pad2)
        )
    );
}
